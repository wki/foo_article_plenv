=encoding utf-8

=head1 plenv -- eine Alternative zu perlbrew

=head2 Ursprung

Sich die Lieblingsprogrammiersprache lokal zu installieren ist inzwischen eine gewisse Mode geworden. Gründe dafür können nicht vorhandene Administrator-Berechtigungen, hohe Flexibilität oder die Einfachkeit eines solchen Unterfangens sein.

Wir kennen alle I<perlbrew> als eine Möglichkeit, Perl lokal zu installieren. Aus der Ruby Welt hat das dort verbreitete I<rbenv> L<http://rbenv.org> inzwischen einen Nachahmer bei Perl gefunden. Macht es Sinn, über diese Alternative nachzudenken? Wir gehen dem auf den Grund.

=head2 Funktionsweise

Genau wie beim Ruby-Vorbild wird der Suchpfad für ausführbare Kommandos für eine Shell lediglich einmal gesetzt, nachdem C<plenv> aktiviert wurde. Innerhalb des Verzeichnisses, in dem C<plenv> installiert wurde, existieren zwei Unterverzeichnisse für Binär-Dateien: F<bin> für C<plenv> und F<shims> für alle zu einem bestimmten Perl gehörenden oder dazu installierten Kommandos.

Die Dateien im F<shims> Verzeichnis sind alle via Hard-Link mit dem selben Shell-Script verbunden. Dieses löst prinzipiell das nachfolgende Kommando aus:

    plenv exec "gewünschtes Programm" argumente...

Ein dadurch aktiviertes Shell Script findet die gewünschte Perl Version, setzt temporär den Suchpfad entsprechend und startet das passende Kommando.

Jedesmal wenn ein neues Perl oder neue Distributionen mit ausführbaren Kommandos installiert wird, muss die Liste der Kommandos im F<shim> Verzeichnis aktualisiert werden. Das erfolgt normalerweise automatisch, kann aber im Bedarfsfall manuell mit dem C<plenv rehash> Befehl angestoßen werden.

=head2 Auswahl der gewünschten Version

Ebenfalls gemäß dem Vorbild von Ruby stehen mehrere Mechanismen mit aufsteigender Priorität zur Verfügung, mittels derer die auszuführende Perl-Version gewählt wird: ein globaler Schalter, innerhalb von Verzeichnissen liegende magische Dateien sowie die Umgebungsvariable C<PLENV_VERSION>.

=head2 Plugins

### TODO: fehlt noch

=head2 Installation

Leider ist C<plenv> noch nicht als CPAN Distribution verfügbar, insofern muss man sich aus dem GitHub-Repository des Autors bedienen. Aber die Installation ist relativ einfach. Nachfolgend die auszuführenden Befehle, die bis zum Verlassen der Shell gelten. Optimalerweise stehen solche Anweisungen in der Start-Datei der Shell.
    
    # nach ~/.plenv auschecken (Verzeichnis wird dabei mit angelegt)
    $ git clone https://github.com/tokuhirom/plenv.git ~/.plenv
    
    # Suchpfad erweitern
    $ export PATH="$HOME/.plenv/bin:$PATH"
    
    # Auto-Vervollständigung und Shims aktivieren
    $ eval "$(plenv init -)"

Nun steht plenv prinzipiell bereit, allerdings erleben wir gleich die erste Überraschung.

    $ plenv install 5.18.1
    plenv: Please install perl-build.
    See https://github.com/tokuhirom/plenv/blob/master/README.md#installation

Na gut, dann folgen wir den Anweisungen:

    $ git clone git://github.com/tokuhirom/Perl-Build.git \
        ~/.plenv/plugins/perl-build/
    
    $ plenv install 5.18.1
    Fetching 5.18.1 as /home/wolfgang/.plenv/cache/perl-5.18.1.tar.gz

Na also -- geht doch! Dann sorgen wir für die richtige Spielwiese:

=head2 Perl Versionen installieren

Verschiedene Perl Versionen zu installieren ist relativ einfach

    # Auflisten aller verfügbaren Perl Versionen dank Vervollständigung:
    $ plenv install (tab)(tab)
    
    # installieren einer ausgewählten Version
    $ plenv install 5.16.3
    $ plenv install 5.14.4

    # Auflisten aller installierten:
    $ plenv versions
      * system
        5.16.3
        5.18.1
    
    # globales Auswählen einer Version
    $ plenv global 5.18.1
    
    $ perl -v
    This is perl 5, version 18, subversion 1 ...

Wer gerne mit C<cpanm> Distributionen installiert, wird sich über diesen einfachen Weg, es zu installieren freuen. Leider muss man diesen Schritt für jedes installierte Perl einmal wiederholen.

    $ plenv install-cpanm
    
    $ plenv global 5.16.3
    $ cpanm --help
    
    plenv: cpanm: command not found
    
    The `cpanm' command exists in these Perl versions:
      5.18.1

Kennt man den Namen eines ausführbaren Kommandos, kann man schnell herausfinden, bei welchen Perl Versionen es zur Verfügung steht:

    $ plenv whence cpanm
    5.14.4
    5.18.1

=head2 Umgang mit verschiedenen Perl Versionen

Wie oben schon erwähnt, stehen drei unterschiedlich prior behandelte Möglichkeiten zum Umschalten auf eine andere Perl-Version zur Verfügung. Die jeweils zu verwendende Version wir hierbei in einer Datei F<version> innerhalb des Plenv-Verzeichnisses festgehalten.

    $ plenv global 5.18.1
    $ perl -v
    This is perl 5, version 18, subversion 1
    $ plenv version
    5.18.1 (set by /home/wolfgang/.plenv/version)
    $ cat ~/.plenv/version
    5.18.1

Sehr praktisch ist die vom Ruby-Vorbild übernommene Funktionalität, die gestattet je Verzeichnis festzulegen, welche Perl-Version innerhalb dieses Verzeichnisses zu wählen ist. Zu beachten ist dabei, dass dieses Verzeichnis (oder ein darunter liegendes) das aktuelle Verzeichnis sein muss! Es genügt nicht, ein ausführbares Kommando innerhalb eines solchen Verzeichnisses auszuführen!

    $ mkdir -p projekte
    $ cd projekte
    $ plenv version
    5.18.1 (set by /home/wolfgang/.plenv/version)
    $ plenv local 5.14.4
    $ plenv version
    5.14.4 (set by /home/wolfgang/projekte/.perl-version)
    $ cd ..
    $ plenv version
    5.18.1 (set by /home/wolfgang/.plenv/version)

=head3 Umschaltung in Server Umgebungen

Will man die Vorzüge der Umschaltung einer Perl-Version in Cron-Umgebungen oder I<init.d> Scripten kommen, braucht man lediglich das passende ausführbare Kommando im F<shims> Verzeichnis von plenv anzugeben. Da es sich bei allen shim-Kommandos um Shell-Scripte handelt, die über die Versions-Umschaltmechanismen das passende Kommando in der gewünchten Perl-Version finden, bekommt man die passende Perl-Version automatisch serviert.

Damit reduziert sich der Aufwand bei z.B. Cron-Scripten auf eine dieser Möglichkeiten:

    # nichts tun, die globale Perl Version ist korrekt gesetzt (hoffentlich)
    ~/pfad/zu/plenv/shims/kommando
    
    # ODER: zu einem passenden Verzeichnis wechseln
    cd /web/data/www.website.de/app
    ~/pfad/zu/plenv/shims/kommando
    
    # ODER: per Environment-Variable das passende Perl wählen
    export PLENV_VERSION=5.16.3
    ~/pfad/zu/plenv/shims/kommando

=head2 Unterschiede zu Perlbrew

Während C<plenv> lediglich zwischen Perl Versionen unterscheidet, bietet Perlbrew die Möglichkeit mittels C<perlbrew lib> je installiertem Perl mehrere Verzeichnisse zur Aufnahme unterschiedlicher Distributionen zu verwalten. Eine solche I<lib> verhält sich von der Umschaltung her wie eine eigene Perl Version. So könnte man Projekt- oder Kundenspezifische Installationen perlbrew-intern sammeln. Plenv bietet solch einen Komfort nicht, allerdings ist die Installation von Distributionen in eigene Verzeichnisse und das korrekte Setzen der C<PERL5LIB>  Umgebungsvariablen nicht dramatisch.

Die Umschaltung zwischen Perl-Versionen kann bei perlbrew zwar temporär mit C<perlbrew use> für die aktuelle Shell vorgenommen werden, eine Automatik wie bei plenv gibt es hier leider nicht.

Perlbrew bietet mit dem C<exec> Befehl die Möglichkeit, ein und das selbe Kommando mit jeder installierten Perl Version auszuführen. Für Tests oder Benchmarks können solche Kleinigkeiten sehr angenehm sein.

Die Installation von C<cpanm> bieten beide Kandidaten, plenv installiert im aktuellen Perl, Perlbrew installiert an zentraler Stelle.

Perlbrew bietet einen I<self-upgrade>, der bei plenv fehlt.

Plenv erlaubt die Suche nach ausführbaren Kommandos und liefert mit C<plenv whence> die Liste aller Perls, die dieses Kommando kennen, perlbrew kennt solch eine Option nicht.
